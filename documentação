get next line
    /**
     * == return_read recebe o resultado de get line ==
     * get_line retorna o ultimo valor de read lido dentro da função, recebe o fd do arquivo e save,
     * pois caso tenha algo salvo dentro da estatica ela incorpora na linha, a linha bruta é gravada
     * no ultimo elemento da chamada (temp)
    **/
    /**
     * Nessa parte Line recebe o resultado de get_result, o qual retorna somente a linha, sem a 
     * quebra no segundo parametro enviamos Save para receber o caracteres lidos a mais, salvando 
     * para a proxima chamada de get_next_line
    **/
    /**
     * Libera a memoria alocada em Temp e caso o arquivo lido esteja no fim, libera a memoria de Save
    **/

get_line
    /**
     * é alocada memoria para buff e para line, com o tamanho pré definido
    **/
    /**
     * É verificado se existe algum conteudo em Save, caso não exista é feito a leitura inicial
     * dentro do line
     * caso exista, esse conteudo é copiado para line
    **/
    /**
     * o while executa caso não exista uma quebra de linha dentro de line e se read não tiver
     * retornado nem -1 nem 0.
    **/
    loop
        /**
         * é feito uma leitura para dentro do buff
         * caso tenha algum erro é retornado -1 e encerrado o programa
         * 
         * Caso a leitura tenha lido algo, é feita a adição desse conteudo dentro de line
        **/
    /**
     * a memora de buff é liberada e line é atribuado ao temp e por fim retorna o ultimo 
     * retorno de read
    **/

get_result
    /**
     * index recebe a posição da quebra de linha presente em temp, caso não tenha quebra de
     * linha ele recebe o len de temp
     *
     * se for encontrada a quebra de linha, é feita a liberação da memoria de save e a nova
     * alocação já com o conteudo que deve ser salvo para a proxima chamada de get_next_line
    **/
    /**
     * É alocada a quantidade de memoria equivalente ao tamanho da linha até a quebra
     *   
     * a linha é copiada até o a quebra de linha (contudo a quebra é substituida por um \0)
     * e depois retornada
    **/

    //printf("\n----\npre-loop\n");
    //printf("pre-line: %s\n", line);

    //printf("\nloop\n");
    //printf("loop-line: %s\n", line);

    //printf("\nend\n");
    //printf("end-line: %s\n", line);